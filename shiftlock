-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- Local Player and Camera
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

--[[ CONFIGURATION ]]--
-- Tweak this value to change the over-the-shoulder camera position
-- X: sideways (positive for right, negative for left)
-- Y: up/down (positive for up)
-- Z: forward/backward (usually kept at 0)
local CAMERA_OFFSET = Vector3.new(1.75, 0.5, 0) 
local CAMERA_TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out) -- How fast the camera moves to the side

-- Create ScreenGui for shiftlock UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FakeShiftlockUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
local success, err = pcall(function()
    screenGui.Parent = player:WaitForChild("PlayerGui", 5)
end)
if not success then
    warn("Failed to parent ScreenGui: " .. tostring(err))
    return -- Stop script if PlayerGui is inaccessible
end
print("ScreenGui created and parented successfully")

-- Toggle Button with Background
local button = Instance.new("TextButton")
button.Name = "ShiftlockToggle"
button.Size = UDim2.new(0, 100, 0, 40)
button.Position = UDim2.new(0.5, -50, 1, -70)
button.AnchorPoint = Vector2.new(0.5, 1)
button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
button.BackgroundTransparency = 0.4
button.TextColor3 = Color3.fromRGB(0, 255, 0)
button.Font = Enum.Font.Arcade
button.TextSize = 14
button.Text = "Shiftlock: OFF"
button.TextWrapped = true
button.ZIndex = 50
button.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 14)
corner.Parent = button

local stroke = Instance.new("UIStroke")
stroke.Thickness = 2
stroke.Color = Color3.fromRGB(80, 80, 80)
stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
stroke.Parent = button

-- Crosshair
local crosshair = Instance.new("Frame")
crosshair.Name = "Crosshair"
crosshair.Size = UDim2.new(0, 6, 0, 6)
crosshair.Position = UDim2.new(0.5, 0, 0.5, 0)
crosshair.AnchorPoint = Vector2.new(0.5, 0.5)
crosshair.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
crosshair.BackgroundTransparency = 0
crosshair.Visible = false
crosshair.ZIndex = 60
crosshair.Parent = screenGui

local crossCorner = Instance.new("UICorner")
crossCorner.CornerRadius = UDim.new(1, 0)
crossCorner.Parent = crosshair

-- Draggable with Tween Smoothing
local dragging, dragInput, dragStart, startPos
local function updateDrag(input)
    local delta = input.Position - dragStart
    local newPos = UDim2.new(
        startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
    TweenService:Create(button, TweenInfo.new(0.12, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = newPos}):Play()
end

button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = button.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

-- Shiftlock System
local shiftlockEnabled = false
local connection

local function setShiftlock(state)
    shiftlockEnabled = state
    local character = player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if connection then
        connection:Disconnect()
        connection = nil
    end

    if shiftlockEnabled then
        button.Text = "Shiftlock: ON"
        crosshair.Visible = true
        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter

        -- NEW: Smoothly tween camera to the offset position
        if humanoid then
            TweenService:Create(humanoid, CAMERA_TWEEN_INFO, { CameraOffset = CAMERA_OFFSET }):Play()
        end

        connection = RunService.RenderStepped:Connect(function()
            -- We need to re-check for root part inside the loop in case of respawn
            local currentCharacter = player.Character
            local root = currentCharacter and currentCharacter:FindFirstChild("HumanoidRootPart")
            if root then
                local camCF = camera.CFrame
                root.CFrame = CFrame.new(root.Position, Vector3.new(
                    camCF.LookVector.X + root.Position.X,
                    root.Position.Y,
                    camCF.LookVector.Z + root.Position.Z
                ))
            end
        end)
    else
        button.Text = "Shiftlock: OFF"
        crosshair.Visible = false
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default

        -- NEW: Smoothly tween camera back to the center
        if humanoid then
            TweenService:Create(humanoid, CAMERA_TWEEN_INFO, { CameraOffset = Vector3.new(0, 0, 0) }):Play()
        end
    end
end

button.MouseButton1Click:Connect(function()
    setShiftlock(not shiftlockEnabled)
    showNotification()
end)

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.LeftShift then
        setShiftlock(not shiftlockEnabled)
        showNotification()
    end
end)

-- Notification Function (Unchanged)
local notificationShown = false
local function showNotification()
    if notificationShown then return end
    notificationShown = true
    print("Creating notification...")
    local notification = Instance.new("ScreenGui")
    notification.Name = "ShiftlockNotification"
    notification.ResetOnSpawn = false
    notification.IgnoreGuiInset = true
    notification.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    local notifSuccess, notifErr = pcall(function()
        notification.Parent = player:WaitForChild("PlayerGui", 5)
    end)
    if not notifSuccess then
        warn("Failed to parent notification ScreenGui: " .. tostring(notifErr))
        notificationShown = false
        return
    end
    local notifFrame = Instance.new("Frame")
    notifFrame.Parent = notification
    notifFrame.Size = UDim2.new(0, 300, 0, 80)
    notifFrame.Position = UDim2.new(0.5, -150, 0.5, -40)
    notifFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    notifFrame.BackgroundTransparency = 0.4
    notifFrame.BorderSizePixel = 0
    notifFrame.ZIndex = 100
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 10)
    notifCorner.Parent = notifFrame
    local notifText = Instance.new("TextLabel")
    notifText.Parent = notifFrame
    notifText.Size = UDim2.new(1, 0, 1, 0)
    notifText.BackgroundTransparency = 1
    notifText.Text = "[ðŸ”” Notification] Script Made by ZZINS_SCRIPTS ðŸ—¿"
    notifText.TextColor3 = Color3.fromRGB(0, 255, 0)
    notifText.Font = Enum.Font.Arcade
    notifText.TextSize = 16
    notifText.TextWrapped = true
    notifText.TextAlignment = Enum.TextAlignment.Center
    notifText.ZIndex = 101
    notifFrame.Visible = true
    task.spawn(function()
        task.wait(3)
        if notification and notification.Parent then
            notification:Destroy()
        end
        notificationShown = false
    end)
end

-- Respawn Safety
player.CharacterAdded:Connect(function(newCharacter)
    if connection then
        connection:Disconnect()
        connection = nil
    end

    -- When the character is added, wait for the humanoid to be ready
    local humanoid = newCharacter:WaitForChild("Humanoid")
    
    if shiftlockEnabled then
        -- Re-apply the full shiftlock state, including the camera offset
        setShiftlock(true)
    else
        -- Ensure the camera offset is reset on the new humanoid
        humanoid.CameraOffset = Vector3.new(0, 0, 0)
        crosshair.Visible = false
    end
end)
